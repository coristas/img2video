#!/usr/bin/python2

# All the images need to be consistent in their resolutions
# before encoding.


import optparse, os, sys, random, subprocess, tempfile, re, mad, fractions

FRAMES_PER_SEC = 25

def process(pics, mp3):
    allframes = mp3_length(mp3) * FRAMES_PER_SEC
    if len(pics) > allframes:
        raise RuntimeError('The number of pictures must not exceed '
                           'the target number of frames')
    framesperpic = fractions.Fraction(allframes, len(pics))
    startframe = 0
    tmpdir = tempfile.mkdtemp(prefix='img2video')
    try:
        for picture in pics:
            createsymlinks(picture, int(startframe), int(startframe + framesperpic),
                           tmpdir)
            startframe += framesperpic
        encode(mp3, "blaa.avi", tmpdir)
    finally:
        print "would delete", tmpdir
        #subprocess.call(["rm", "-rf" ,tmpdir])

def mp3_length(mp3):
    return mad.MadFile(sys.argv[-1]).total_time() / 1000

# Encoding actions
def encode(mp3, outfile, tmpdir):
    subprocess.call(["ffmpeg",
                     "-r", str(FRAMES_PER_SEC),
                     "-i", tmpdir + '/frame%d.jpg', "-i", mp3,
                     "-vcodec", "ffv1","-b", "500k", "-acodec","copy",
                     outfile])


def createsymlinks(picture, startnumber, endnumber, tmpdir):
    crntdir = os.getcwd()
    for i in xrange(startnumber,endnumber):
        os.symlink(crntdir+'/'+picture, '%s/frame%d.jpg' % (tmpdir,i))

def main():
    parser = optparse.OptionParser(usage="%prog [-s] IMAGES... MP3")
    parser.add_option('-s', '--shuffle', dest='shuffle',
                      default=False, action='store_true',
                      help='shuffle images before encoding')
    options, args = parser.parse_args()
    if len(args) < 2:
        parser.print_usage(sys.stderr)
        sys.exit(2)
    pics = args[:-1]
    mp3 = args[-1]
    if options.shuffle:
        random.shuffle(pics)
    process(pics, mp3)

if __name__ == '__main__':
    main()
