#!/usr/bin/python2

# All the images need to be consistent in their resolutions
# before encoding.


import optparse, os, sys, random, subprocess, tempfile, mad, fractions, shutil

FRAMES_PER_SEC = 25

def process(pics, mp3):
    frames = mp3_length(mp3) * FRAMES_PER_SEC
    if len(pics) > frames:
        raise RuntimeError('The number of pictures must not exceed '
                           'the target number of frames')
    startframe = 0
    picdir = tempfile.mkdtemp(prefix='img2video')
    try:
        createsymlinks(pics, frames, picdir)
        encode(mp3, "blaa.avi", picdir)
    finally:
        print "would delete", picdir
        #shutil.rmtree(picdir)

def mp3_length(mp3):
    return mad.MadFile(sys.argv[-1]).total_time() / 1000

def process_pic(pic, picdir):
    # trololo...
    return os.path.abspath(pic)

def createsymlinks(pics, frames, picdir):
    framesperpic = fractions.Fraction(frames, len(pics))
    startframe = 0
    crntdir = os.getcwd()
    for pic in pics:
        pic = process_pic(pic, picdir)
        for i in xrange(int(startframe), int(startframe + framesperpic)):
            os.symlink(pic, '%s/frame%d.jpg' % (picdir, i))
        startframe += framesperpic

def encode(mp3, outfile, picdir):
    subprocess.call(["ffmpeg",
                     "-r", str(FRAMES_PER_SEC),
                     "-i", picdir + '/frame%d.jpg', "-i", mp3,
                     "-vcodec", "ffv1","-b", "500k", "-acodec","copy",
                     outfile])


def main():
    parser = optparse.OptionParser(usage="%prog [-s] IMAGES... MP3")
    parser.add_option('-s', '--shuffle', dest='shuffle',
                      default=False, action='store_true',
                      help='shuffle images before encoding')
    options, args = parser.parse_args()
    if len(args) < 2:
        parser.print_usage(sys.stderr)
        sys.exit(2)
    pics = args[:-1]
    mp3 = args[-1]
    if options.shuffle:
        random.shuffle(pics)
    process(pics, mp3)

if __name__ == '__main__':
    main()
